# dog_medical_tracker.py - –° —Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ–π
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from datetime import datetime
import os

plt.rcParams['font.family'] = 'DejaVu Sans'

class DogMedicalTracker:
    def __init__(self, data_file='dog_medical_data.xlsx'):
        self.data_file = data_file
        
        # –†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –°–û–ë–ê–ö —Å —É—á–µ—Ç–æ–º –•–ë–ü 3 —Å—Ç–∞–¥–∏–∏
        self.reference_ranges = {
            # ü©∫ –ö–†–û–í–¨ - –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            'WBC': (6.0, 17.0),           # –õ–µ–π–∫–æ—Ü–∏—Ç—ã
            'RBC': (5.5, 8.5),            # –≠—Ä–∏—Ç—Ä–æ—Ü–∏—Ç—ã  
            'Hb': (120, 180),             # –ì–µ–º–æ–≥–ª–æ–±–∏–Ω
            'HCT': (37, 55),              # –ì–µ–º–∞—Ç–æ–∫—Ä–∏—Ç
            'PLT': (200, 500),            # –¢—Ä–æ–º–±–æ—Ü–∏—Ç—ã
            
            # üß™ –ë–ò–û–•–ò–ú–ò–Ø - –ø–æ—á–µ—á–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (–∫–ª—é—á–µ–≤—ã–µ –¥–ª—è –•–ë–ü)
            'Urea': (3.5, 10.0),          # –ú–æ—á–µ–≤–∏–Ω–∞
            'Creatinine_blood': (60, 140), # –ö—Ä–µ–∞—Ç–∏–Ω–∏–Ω –∫—Ä–æ–≤–∏
            'SDMA': (0, 14),              # SDMA
            'Phosphorus': (0.8, 2.0),     # –§–æ—Å—Ñ–æ—Ä
            
            # üß™ –≠–õ–ï–ö–¢–†–û–õ–ò–¢–´
            'Potassium': (3.5, 5.5),      # –ö–∞–ª–∏–π
            'Sodium': (140, 155),         # –ù–∞—Ç—Ä–∏–π
            'Chloride': (105, 120),       # –•–ª–æ—Ä–∏–¥—ã
            'iCalcium': (1.1, 1.4),       # –ò–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–ª—å—Ü–∏–π
            
            # üß™ –ü–ï–ß–ï–ù–¨/–ü–û–î–ñ–ï–õ–£–î–û–ß–ù–ê–Ø
            'ALT': (10, 125),             # –ê–õ–¢
            'Lipase': (0, 250),           # –ü–∞–Ω–∫—Ä–µ–∞—Ç–∏—á–µ—Å–∫–∞—è –ª–∏–ø–∞–∑–∞
            'Amylase': (300, 2000),       # –ê–º–∏–ª–∞–∑–∞
            'Albumin': (25, 40),          # –ê–ª—å–±—É–º–∏–Ω
            'Total_protein': (55, 75),    # –û–±—â–∏–π –±–µ–ª–æ–∫
            
            # ‚ù§Ô∏è –°–ï–†–î–ï–ß–ù–´–ï –ú–ê–†–ö–ï–†–´
            'Troponin': (0, 0.2),         # –¢—Ä–æ–ø–æ–Ω–∏–Ω
            
            # üíß –ú–û–ß–ê - –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–∏ –•–ë–ü
            'USG': (1.015, 1.045),        # –£–¥–µ–ª—å–Ω—ã–π –≤–µ—Å –º–æ—á–∏
            'Protein_urine': (0, 30),     # –ë–µ–ª–æ–∫ –≤ –º–æ—á–µ - –º–≥/–¥–ª
            'Creatinine_urine': (50, 250), # –ö—Ä–µ–∞—Ç–∏–Ω–∏–Ω –º–æ—á–∏ - –º–≥/–¥–ª
            'UPC_ratio': (0.0, 0.5),      # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –±–µ–ª–æ–∫/–∫—Ä–µ–∞—Ç–∏–Ω–∏–Ω
            'Leukocytes_urine': (0, 5),   # –õ–µ–π–∫–æ—Ü–∏—Ç—ã –≤ –º–æ—á–µ
            'Glucose_urine': (0, 0),      # –ì–ª—é–∫–æ–∑–∞ –≤ –º–æ—á–µ
            'Casts': (0, 0),              # –¶–∏–ª–∏–Ω–¥—Ä—ã
        }
        
        self.upc_classification = {
            '–Ω–æ—Ä–º–∞': (0.0, 0.5),
            '–ø–æ–≥—Ä–∞–Ω–∏—á–Ω–∞—è': (0.5, 1.0),
            'proteinuria': (1.0, 2.0),
            '—Ç—è–∂–µ–ª–∞—è proteinuria': (2.0, float('inf'))
        }
        
        self.load_data()
    
    def load_data(self):
        if os.path.exists(self.data_file):
            self.df = pd.read_excel(self.data_file)
            self.df['date'] = pd.to_datetime(self.df['date'])
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞")
            print(f"üìä –ó–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ: {len(self.df)}")
        else:
            columns = ['date'] + list(self.reference_ranges.keys())
            self.df = pd.DataFrame(columns=columns)
            print("üìÅ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–±–∞–∫–∏")
    
    def save_data(self):
        self.df.to_excel(self.data_file, index=False)
        print("üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    
    def input_float(self, prompt):
        try:
            value = input(prompt)
            return float(value) if value else np.nan
        except ValueError:
            return np.nan
    
    def calculate_upc_ratio(self, protein_mgDL, creatinine_mgDL):
        """–†–∞—Å—á–µ—Ç UPC —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –≤ –º–≥/–¥–ª"""
        if pd.isna(protein_mgDL) or pd.isna(creatinine_mgDL) or creatinine_mgDL == 0:
            return np.nan
        return protein_mgDL / creatinine_mgDL
    
    def add_measurement(self):
        print("\nüêï –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ï–ô –°–û–ë–ê–ö–ò")
        print("=" * 50)
        
        new_data = {'date': input("–î–∞—Ç–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î): ")}
        
        print("\nü©∫ –û–ë–©–ò–ô –ê–ù–ê–õ–ò–ó –ö–†–û–í–ò:")
        new_data['WBC'] = self.input_float("–õ–µ–π–∫–æ—Ü–∏—Ç—ã (WBC, √ó10‚Åπ/–ª): ")
        new_data['RBC'] = self.input_float("–≠—Ä–∏—Ç—Ä–æ—Ü–∏—Ç—ã (RBC, √ó10¬π¬≤/–ª): ")
        new_data['Hb'] = self.input_float("–ì–µ–º–æ–≥–ª–æ–±–∏–Ω (Hb, –≥/–ª): ")
        new_data['HCT'] = self.input_float("–ì–µ–º–∞—Ç–æ–∫—Ä–∏—Ç (HCT, %): ")
        new_data['PLT'] = self.input_float("–¢—Ä–æ–º–±–æ—Ü–∏—Ç—ã (PLT, √ó10‚Åπ/–ª): ")
        
        print("\nüß™ –ë–ò–û–•–ò–ú–ò–Ø - –ü–û–ß–ï–ß–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò (–•–ë–ü):")
        new_data['Urea'] = self.input_float("–ú–æ—á–µ–≤–∏–Ω–∞ (Urea, –º–º–æ–ª—å/–ª): ")
        new_data['Creatinine_blood'] = self.input_float("–ö—Ä–µ–∞—Ç–∏–Ω–∏–Ω –ö–†–û–í–ò (Creatinine, –º–∫–º–æ–ª—å/–ª): ")
        new_data['SDMA'] = self.input_float("SDMA (–º–∫–≥/–¥–ª): ")
        new_data['Phosphorus'] = self.input_float("–§–æ—Å—Ñ–æ—Ä (Phosphorus, –º–º–æ–ª—å/–ª): ")
        
        print("\nüß™ –≠–õ–ï–ö–¢–†–û–õ–ò–¢–´:")
        new_data['Potassium'] = self.input_float("–ö–∞–ª–∏–π (K+, –º–º–æ–ª—å/–ª): ")
        new_data['Sodium'] = self.input_float("–ù–∞—Ç—Ä–∏–π (Na+, –º–º–æ–ª—å/–ª): ")
        new_data['Chloride'] = self.input_float("–•–ª–æ—Ä–∏–¥—ã (Cl-, –º–º–æ–ª—å/–ª): ")
        new_data['iCalcium'] = self.input_float("–ò–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–ª—å—Ü–∏–π (iCa, –º–º–æ–ª—å/–ª): ")
        
        print("\nüß™ –ü–ï–ß–ï–ù–¨ –ò –ü–û–î–ñ–ï–õ–£–î–û–ß–ù–ê–Ø:")
        new_data['ALT'] = self.input_float("–ê–õ–¢ (ALT, –ï–¥/–ª): ")
        new_data['Lipase'] = self.input_float("–ü–∞–Ω–∫—Ä–µ–∞—Ç–∏—á–µ—Å–∫–∞—è –ª–∏–ø–∞–∑–∞ (Lipase, –ï–¥/–ª): ")
        new_data['Amylase'] = self.input_float("–ê–º–∏–ª–∞–∑–∞ (Amylase, –ï–¥/–ª): ")
        new_data['Albumin'] = self.input_float("–ê–ª—å–±—É–º–∏–Ω (Albumin, –≥/–ª): ")
        new_data['Total_protein'] = self.input_float("–û–±—â–∏–π –±–µ–ª–æ–∫ (Total Protein, –≥/–ª): ")
        
        print("\n‚ù§Ô∏è –°–ï–†–î–ï–ß–ù–´–ï –ú–ê–†–ö–ï–†–´:")
        new_data['Troponin'] = self.input_float("–¢—Ä–æ–ø–æ–Ω–∏–Ω (Troponin, –Ω–≥/–º–ª): ")
        
        print("\nüíß –ê–ù–ê–õ–ò–ó –ú–û–ß–ò:")
        new_data['USG'] = self.input_float("–£–¥–µ–ª—å–Ω—ã–π –≤–µ—Å –º–æ—á–∏ (USG): ")
        new_data['Protein_urine'] = self.input_float("–ë–µ–ª–æ–∫ –≤ –º–æ—á–µ (–º–≥/–¥–ª): ")
        new_data['Creatinine_urine'] = self.input_float("–ö—Ä–µ–∞—Ç–∏–Ω–∏–Ω –ú–û–ß–ò (–º–≥/–¥–ª): ")
        
        # –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –†–ê–°–ß–ï–¢ UPC
        new_data['UPC_ratio'] = self.calculate_upc_ratio(
            new_data['Protein_urine'], 
            new_data['Creatinine_urine']
        )
        
        print(f"üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ UPC: {new_data['UPC_ratio']:.2f}")
        
        new_data['Leukocytes_urine'] = self.input_float("–õ–µ–π–∫–æ—Ü–∏—Ç—ã –≤ –º–æ—á–µ (–≤ –ø–æ–ª–µ –∑—Ä–µ–Ω–∏—è): ")
        new_data['Glucose_urine'] = self.input_float("–ì–ª—é–∫–æ–∑–∞ –≤ –º–æ—á–µ: ")
        new_data['Casts'] = self.input_float("–¶–∏–ª–∏–Ω–¥—Ä—ã (–≤ –ø–æ–ª–µ –∑—Ä–µ–Ω–∏—è): ")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ DataFrame
        self.df = pd.concat([self.df, pd.DataFrame([new_data])], ignore_index=True)
        self.df['date'] = pd.to_datetime(self.df['date'])
        self.df = self.df.sort_values('date')
        self.save_data()
        print("‚úÖ –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
    
    def get_units(self, metric):
        units = {
            'WBC': '√ó10‚Åπ/–ª', 'RBC': '√ó10¬π¬≤/–ª', 'Hb': '–≥/–ª', 'HCT': '%', 'PLT': '√ó10‚Åπ/–ª',
            'Urea': '–º–º–æ–ª—å/–ª', 'Creatinine_blood': '–º–∫–º–æ–ª—å/–ª', 'SDMA': '–º–∫–≥/–¥–ª', 'Phosphorus': '–º–º–æ–ª—å/–ª',
            'Potassium': '–º–º–æ–ª—å/–ª', 'Sodium': '–º–º–æ–ª—å/–ª', 'Chloride': '–º–º–æ–ª—å/–ª', 'iCalcium': '–º–º–æ–ª—å/–ª',
            'ALT': '–ï–¥/–ª', 'Lipase': '–ï–¥/–ª', 'Amylase': '–ï–¥/–ª', 'Albumin': '–≥/–ª', 'Total_protein': '–≥/–ª',
            'Troponin': '–Ω–≥/–º–ª', 'USG': '', 
            'Protein_urine': '–º–≥/–¥–ª',
            'Creatinine_urine': '–º–≥/–¥–ª',
            'UPC_ratio': 'UPC', 
            'Leukocytes_urine': '–≤ –ø/–∑', 'Glucose_urine': '', 'Casts': '–≤ –ø/–∑'
        }
        return units.get(metric, '')
    
    def get_metric_name(self, metric):
        """–ü–æ–ª—É—á–∏—Ç—å —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è"""
        names = {
            'WBC': '–õ–µ–π–∫–æ—Ü–∏—Ç—ã', 'RBC': '–≠—Ä–∏—Ç—Ä–æ—Ü–∏—Ç—ã', 'Hb': '–ì–µ–º–æ–≥–ª–æ–±–∏–Ω', 
            'HCT': '–ì–µ–º–∞—Ç–æ–∫—Ä–∏—Ç', 'PLT': '–¢—Ä–æ–º–±–æ—Ü–∏—Ç—ã', 'Urea': '–ú–æ—á–µ–≤–∏–Ω–∞',
            'Creatinine_blood': '–ö—Ä–µ–∞—Ç–∏–Ω–∏–Ω –∫—Ä–æ–≤–∏', 'SDMA': 'SDMA', 
            'Phosphorus': '–§–æ—Å—Ñ–æ—Ä', 'Potassium': '–ö–∞–ª–∏–π', 'Sodium': '–ù–∞—Ç—Ä–∏–π',
            'Chloride': '–•–ª–æ—Ä–∏–¥—ã', 'iCalcium': '–ò–æ–Ω–∏–∑–∏—Ä. –∫–∞–ª—å—Ü–∏–π', 'ALT': '–ê–õ–¢',
            'Lipase': '–ü–∞–Ω–∫—Ä–µ–∞—Ç. –ª–∏–ø–∞–∑–∞', 'Amylase': '–ê–º–∏–ª–∞–∑–∞', 'Albumin': '–ê–ª—å–±—É–º–∏–Ω',
            'Total_protein': '–û–±—â–∏–π –±–µ–ª–æ–∫', 'Troponin': '–¢—Ä–æ–ø–æ–Ω–∏–Ω', 'USG': '–£–¥. –≤–µ—Å –º–æ—á–∏',
            'Protein_urine': '–ë–µ–ª–æ–∫ –º–æ—á–∏', 'Creatinine_urine': '–ö—Ä–µ–∞—Ç–∏–Ω–∏–Ω –º–æ—á–∏',
            'UPC_ratio': '–°–æ–æ—Ç–Ω. –ë/–ö (UPC)', 'Leukocytes_urine': '–õ–µ–π–∫–æ—Ü–∏—Ç—ã –º–æ—á–∏',
            'Glucose_urine': '–ì–ª—é–∫–æ–∑–∞ –º–æ—á–∏', 'Casts': '–¶–∏–ª–∏–Ω–¥—Ä—ã'
        }
        return names.get(metric, metric)
    
    def show_transposed_table(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É: –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ ‚Üí —Å—Ç—Ä–æ–∫–∏, –¥–∞—Ç—ã ‚Üí —Å—Ç–æ–ª–±—Ü—ã"""
        if len(self.df) == 0:
            print("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
        
        print("\nüìä –¢–ê–ë–õ–ò–¶–ê –ü–û–ö–ê–ó–ê–¢–ï–õ–ï–ô (–ø–æ –¥–∞—Ç–∞–º)")
        print("=" * 100)
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        transposed_df = self.df.set_index('date').T
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        transposed_df.columns = [col.strftime('%d.%m.%Y') for col in transposed_df.columns]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –∫ –Ω–∞–∑–≤–∞–Ω–∏—è–º —Å—Ç—Ä–æ–∫
        transposed_df.index = [f"{self.get_metric_name(idx)} ({self.get_units(idx)})" 
                             for idx in transposed_df.index]
        
        # –û–∫—Ä—É–≥–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        transposed_df = transposed_df.round(3)
        
        # –ó–∞–º–µ–Ω—è–µ–º NaN –Ω–∞ –ø—Ä–æ—á–µ—Ä–∫–∏
        transposed_df = transposed_df.fillna('-')
        
        # –í—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É
        pd.set_option('display.max_rows', None)
        pd.set_option('display.width', 1000)
        
        print(transposed_df)
        
        print(f"\nüìà –í—Å–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π: {len(self.df)}")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {self.df['date'].min().strftime('%d.%m.%Y')} - {self.df['date'].max().strftime('%d.%m.%Y')}")
    
    def show_key_metrics_table(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π"""
        if len(self.df) == 0:
            print("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
        
        print("\nüéØ –ö–õ–Æ–ß–ï–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò –•–ë–ü –ò –ü–ê–ù–ö–†–ï–ê–¢–ò–¢–ê")
        print("=" * 100)
        
        # –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        key_metrics = [
            'Creatinine_blood', 'Urea', 'Phosphorus', 'SDMA',  # –ü–æ—á–∫–∏
            'Protein_urine', 'UPC_ratio', 'Creatinine_urine', 'USG',  # –ú–æ—á–∞
            'Lipase', 'ALT', 'Albumin',  # –ü–æ–¥–∂–µ–ª—É–¥–æ—á–Ω–∞—è/–ø–µ—á–µ–Ω—å
            'Potassium', 'iCalcium'  # –≠–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç—ã
        ]
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        existing_metrics = [m for m in key_metrics if m in self.df.columns]
        
        if not existing_metrics:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–ª—é—á–µ–≤—ã–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç–æ–ª—å–∫–æ —Å –∫–ª—é—á–µ–≤—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
        key_df = self.df[['date'] + existing_metrics].set_index('date').T
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
        key_df.columns = [col.strftime('%d.%m.%Y') for col in key_df.columns]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏–π
        key_df.index = [f"{self.get_metric_name(idx)} ({self.get_units(idx)})" 
                       for idx in key_df.index]
        
        # –û–∫—Ä—É–≥–ª—è–µ–º –∏ –∑–∞–º–µ–Ω—è–µ–º NaN
        key_df = key_df.round(3).fillna('-')
        
        # –í—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É
        pd.set_option('display.max_rows', None)
        print(key_df)
    
    def plot_proteinuria_dashboard(self):
        """–î–∞—à–±–æ—Ä–¥ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ proteinuria"""
        if len(self.df) < 1:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤")
            return
        
        fig, axes = plt.subplots(2, 2, figsize=(15, 10))
        
        # 1. –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ UPC
        if 'UPC_ratio' in self.df.columns:
            ax = axes[0, 0]
            upc_values = self.df['UPC_ratio'].dropna()
            if len(upc_values) > 0:
                ax.plot(self.df['date'], self.df['UPC_ratio'], 
                       marker='o', linewidth=3, color='red', label='UPC')
                
                # –ó–æ–Ω—ã UPC
                ax.axhspan(0, 0.5, alpha=0.3, color='green', label='–ù–æ—Ä–º–∞ (0-0.5)')
                ax.axhspan(0.5, 1.0, alpha=0.3, color='yellow', label='–ü–æ–≥—Ä–∞–Ω–∏—á–Ω–∞—è (0.5-1.0)')
                ax.axhspan(1.0, 2.0, alpha=0.3, color='orange', label='Proteinuria (1.0-2.0)')
                ax.axhspan(2.0, max(upc_values.max()*1.1, 3.0), alpha=0.3, color='red', label='–¢—è–∂–µ–ª–∞—è (>2.0)')
                
                ax.set_title('üìä –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ë–ï–õ–û–ö/–ö–†–ï–ê–¢–ò–ù–ò–ù (UPC)')
                ax.set_ylabel('UPC ratio')
                ax.legend()
                ax.grid(True, alpha=0.3)
                ax.tick_params(axis='x', rotation=45)
        
        # 2. –ë–µ–ª–æ–∫ –º–æ—á–∏ –≤ –º–≥/–¥–ª
        if 'Protein_urine' in self.df.columns:
            ax = axes[0, 1]
            protein_values = self.df['Protein_urine'].dropna()
            if len(protein_values) > 0:
                ax.plot(self.df['date'], self.df['Protein_urine'], 
                       marker='D', linewidth=2, color='purple', label='–ë–µ–ª–æ–∫ –º–æ—á–∏')
                ax.axhspan(0, 30, alpha=0.3, color='green', label='–ù–æ—Ä–º–∞ (0-30 –º–≥/–¥–ª)')
                ax.set_title('üíß –ë–µ–ª–æ–∫ –≤ –º–æ—á–µ')
                ax.set_ylabel('–º–≥/–¥–ª')
                ax.legend()
                ax.grid(True, alpha=0.3)
                ax.tick_params(axis='x', rotation=45)
        
        # 3. –ö—Ä–µ–∞—Ç–∏–Ω–∏–Ω –º–æ—á–∏ –≤ –º–≥/–¥–ª
        if 'Creatinine_urine' in self.df.columns:
            ax = axes[1, 0]
            creat_values = self.df['Creatinine_urine'].dropna()
            if len(creat_values) > 0:
                ax.plot(self.df['date'], self.df['Creatinine_urine'], 
                       marker='^', linewidth=2, color='green', label='–ö—Ä–µ–∞—Ç–∏–Ω–∏–Ω –º–æ—á–∏')
                ax.axhspan(50, 250, alpha=0.3, color='green', label='–ù–æ—Ä–º–∞ (50-250 –º–≥/–¥–ª)')
                ax.set_title('üíß –ö—Ä–µ–∞—Ç–∏–Ω–∏–Ω –º–æ—á–∏')
                ax.set_ylabel('–º–≥/–¥–ª')
                ax.legend()
                ax.grid(True, alpha=0.3)
                ax.tick_params(axis='x', rotation=45)
        
        # 4. –£–¥–µ–ª—å–Ω—ã–π –≤–µ—Å –º–æ—á–∏
        if 'USG' in self.df.columns:
            ax = axes[1, 1]
            ax.plot(self.df['date'], self.df['USG'], 
                   marker='v', linewidth=2, color='brown', label='–£–¥–µ–ª—å–Ω—ã–π –≤–µ—Å')
            ax.axhspan(1.015, 1.045, alpha=0.3, color='green', label='–ù–æ—Ä–º–∞ (1.015-1.045)')
            ax.set_title('üíß –£–¥–µ–ª—å–Ω—ã–π –≤–µ—Å –º–æ—á–∏ (USG)')
            ax.set_ylabel('USG')
            ax.legend()
            ax.grid(True, alpha=0.3)
            ax.tick_params(axis='x', rotation=45)
        
        plt.suptitle('üêï –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–û–ß–ï–ß–ù–û–ô –§–£–ù–ö–¶–ò–ò', fontsize=16)
        plt.tight_layout()
        plt.show()

    def show_proteinuria_analysis(self):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ proteinuria"""
        if len(self.df) == 0:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        latest = self.df.iloc[-1]
        
        print("\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó PROTEINURIA")
        print("=" * 60)
        
        if 'UPC_ratio' in latest and not pd.isna(latest['UPC_ratio']):
            upc = latest['UPC_ratio']
            
            if upc < 0.5:
                stage = "–ù–û–†–ú–ê"
                recommendation = "‚úÖ –û—Ç–ª–∏—á–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å!"
            elif upc < 1.0:
                stage = "–ü–û–ì–†–ê–ù–ò–ß–ù–ê–Ø"
                recommendation = "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ, –≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ò–ê–ü–§"
            elif upc < 2.0:
                stage = "PROTEINURIA" 
                recommendation = "üö® –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ã –ò–ê–ü–§, –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞–∂–¥—ã–µ 2-4 –Ω–µ–¥–µ–ª–∏"
            else:
                stage = "–¢–Ø–ñ–ï–õ–ê–Ø PROTEINURIA"
                recommendation = "üö® –°–†–û–ß–ù–ê–Ø –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Ø –í–ï–¢–ï–†–ò–ù–ê–†–ê!"
            
            print(f"üìä –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ë–ï–õ–û–ö/–ö–†–ï–ê–¢–ò–ù–ò–ù (UPC): {upc:.2f}")
            print(f"üéØ –°—Ç–∞–¥–∏—è: {stage}")
            print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {recommendation}")
            print()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        urine_metrics = ['Protein_urine', 'Creatinine_urine', 'USG']
        for metric in urine_metrics:
            if metric in latest and not pd.isna(latest[metric]):
                value = latest[metric]
                low, high = self.reference_ranges[metric]
                status = "‚úÖ –í –Ω–æ—Ä–º–µ" if low <= value <= high else "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ"
                print(f"{metric}: {value:.1f} {self.get_units(metric)} (–Ω–æ—Ä–º–∞: {low}-{high}) - {status}")

    def show_ckd_analysis(self):
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –•–ë–ü 3 —Å—Ç–∞–¥–∏–∏"""
        if len(self.df) == 0:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        latest = self.df.iloc[-1]
        
        print("\nüîç –ê–ù–ê–õ–ò–ó –•–ë–ü 3 –°–¢–ê–î–ò–ò")
        print("=" * 60)
        
        ckd_metrics = {
            'Creatinine_blood': (180, 440),
            'Urea': (10, 25),
            'Phosphorus': (1.6, 3.0),
            'SDMA': (18, 35)
        }
        
        for metric, (stage_min, stage_max) in ckd_metrics.items():
            if metric in latest and not pd.isna(latest[metric]):
                value = latest[metric]
                
                if value < stage_min:
                    status = "‚¨áÔ∏è  –ù–∏–∂–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 3 —Å—Ç–∞–¥–∏–∏"
                elif value <= stage_max:
                    status = "üéØ –í –¥–∏–∞–ø–∞–∑–æ–Ω–µ 3 —Å—Ç–∞–¥–∏–∏"
                else:
                    status = "‚¨ÜÔ∏è  –í—ã—à–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 3 —Å—Ç–∞–¥–∏–∏"
                
                print(f"{metric}: {value:.1f} {self.get_units(metric)} - {status}")

    def show_all_data(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""
        if len(self.df) == 0:
            print("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
        
        print("\nüìã –í–´–ë–ï–†–ò–¢–ï –§–û–†–ú–ê–¢ –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø:")
        print("1. üìä –û–±—ã—á–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ (–¥–∞—Ç—ã ‚Üí —Å—Ç—Ä–æ–∫–∏)")
        print("2. üîÑ –¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ (–ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ ‚Üí —Å—Ç—Ä–æ–∫–∏)")
        print("3. üéØ –¢–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
        
        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-3): ")
        
        if choice == '1':
            print("\nüìä –û–ë–´–ß–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê (–¥–∞—Ç—ã ‚Üí —Å—Ç—Ä–æ–∫–∏):")
            print("=" * 80)
            pd.set_option('display.max_columns', None)
            pd.set_option('display.width', 1000)
            display_df = self.df.copy()
            display_df['date'] = display_df['date'].dt.strftime('%Y-%m-%d')
            numeric_columns = display_df.select_dtypes(include=[np.number]).columns
            display_df[numeric_columns] = display_df[numeric_columns].round(3)
            print(display_df)
            
        elif choice == '2':
            self.show_transposed_table()
            
        elif choice == '3':
            self.show_key_metrics_table()
            
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

    def show_main_menu(self):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∏—Å—Ç–µ–º—ã"""
        while True:
            print("\n" + "="*60)
            print("üêï –°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –°–û–ë–ê–ö–ò: –•–ë–ü 3 –°–¢–ê–î–ò–ò + –ü–ê–ù–ö–†–ï–ê–¢–ò–¢")
            print("="*60)
            print("1. üìä –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
            print("2. üìà –î–∞—à–±–æ—Ä–¥ PROTEINURIA (–≥—Ä–∞—Ñ–∏–∫–∏)")
            print("3. üîç –ê–Ω–∞–ª–∏–∑ –•–ë–ü 3 —Å—Ç–∞–¥–∏–∏") 
            print("4. üìã –ê–Ω–∞–ª–∏–∑ PROTEINURIA")
            print("5. üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (—Ç–∞–±–ª–∏—Ü—ã)")
            print("6. üö™ –í—ã—Ö–æ–¥")
            
            choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-6): ")
            
            if choice == '1':
                self.add_measurement()
            elif choice == '2':
                self.plot_proteinuria_dashboard()
            elif choice == '3':
                self.show_ckd_analysis()
            elif choice == '4':
                self.show_proteinuria_analysis()
            elif choice == '5':
                self.show_all_data()
            elif choice == '6':
                print("üíù –ó–∞–±–æ—Ç–∞ –æ –ø–∏—Ç–æ–º—Ü–µ - —ç—Ç–æ –≤–∞–∂–Ω–æ! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
if __name__ == "__main__":
    print("üêï –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è —Å–æ–±–∞–∫–∏ —Å –•–ë–ü –∏ –ø–∞–Ω–∫—Ä–µ–∞—Ç–∏—Ç–æ–º...")
    tracker = DogMedicalTracker()
    tracker.show_main_menu()